#include<stdio.h>            //预处理器指令
int main(){                  //主函数
    printf("Hello,C！\n");   
    return 0;
}

1. 标记：C 程序由各种标记组成，标记可以是关键字、标识符、常量、字符串值，或者是一个符号。
printf    // 标识符
(    // 符号
"Hello, W3Cschool! \n"    // 字符串值
)    // 符号
;    // 分号是语句结束符,表示一个逻辑实体的结束

2. 标识符
C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 ​A-Z​ 或​a-z​ 或下划线​_​ 开始，后跟零个或多个字母、下划线和数字（​0-9​）。
C 标识符内不允许出现标点字符，比如 ​@​、​$​ 和 ​%​。C 是区分大小写的编程语言。

3. C 数据类型
3.1 基本类型：
它们是算术类型，包括两种类型：整数类型和浮点类型。
3.2 枚举类型：
它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。
3.3	void 类型：
类型说明符 void 表明没有可用的值。
3.4	派生类型：
它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。


4.定义常量
在 C 中，有两种简单的定义常量的方式：
使用 #define 预处理器。
使用 const 关键字。


5. 存储类
存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。
5.1 auto存储类
auto 存储类是所有局部变量默认的存储类。auto 只能用在函数内，即 auto 只能修饰局部变量。
5.2 register存储类
register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。
5.3 static存储类
static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。
使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。
5.4 extern 存储类
extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。


sizeof()可以得到数据类型存储字节的大小。

extern声明：
定义也是声明：当定义变量时我们声明了它的类型和名字。
extern声明不是定义：通过使用extern关键字声明变量名而不定义它。
[注意]
变量在使用前就要被定义或者声明。
在一个程序中，变量只能定义一次，却可以声明多次。
定义分配存储空间，而声明不会。
